!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t){function n(e,t){switch(t){case"none":return 1;case"linear":return e;case"sqrt":return Math.sqrt(e);case"square":return Math.pow(e,2);case"exp":return Math.min(1e6,Math.exp(e/3));case"log":return Math.log(e)+1;case"bell":let n=e/3-2;return Math.max(.01,25*Math.exp(n-Math.pow(n,2)/2))}}function r(e,t){switch(t){case"linear":return Math.sqrt(e);case"sqrt":return 5*Math.pow(e,.25);case"square":return e/25;case"exp":return Math.min(1e6,Math.exp(Math.sqrt(e)/10)/3);case"log":return Math.max(1,25*(Math.log(e)/2+1))}}const o=self;let a=null;function u(e,t){let n=1/0,r=e.values().next().value;for(let o of e.keys()){let e=t.get(o);e<n&&(n=e,r=o)}return e.delete(r),r}function s(e,t){const o=new Set,s=new Map,l=new Map;for(let t of e.values())s.set(t,1/0),l.set(t.id,null),o.add(t);for(s.set(t,0);o.size>0;){const e=u(o,s);for(let[t,o]of e.neighbors){let u=null;if(o.ends[0].isDead||o.ends[1].isDead)u=Number.MAX_VALUE;else{let[e,t]=[o._length,a.distanceWeight],[s,l]=[o._weight,a.trafficWeight];u=r(e,t)/n(s,l)}const i=s.get(e)+u;i<s.get(t)&&(s.set(t,i),l.set(t.id,e.id))}}return l}o.onmessage=function(e){let t=new Map,[n,r]=e.data;r&&(a=r);for(let e of n.values()){const r=s(n,e);t.set(e.id,r)}o.postMessage(t)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,